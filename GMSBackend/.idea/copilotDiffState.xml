<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/gms/config/CorsConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/gms/config/CorsConfig.java" />
              <option name="updatedContent" value="package com.gms.config;&#10;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.web.servlet.config.annotation.CorsRegistry;&#10;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;&#10;&#10;@Configuration&#10;public class CorsConfig {&#10;    @Bean&#10;    public WebMvcConfigurer corsConfigurer() {&#10;        return new WebMvcConfigurer() {&#10;            @Override&#10;            public void addCorsMappings(CorsRegistry registry) {&#10;                registry.addMapping(&quot;/**&quot;)&#10;                        .allowedOrigins(&quot;*&quot;)&#10;                        .allowedMethods(&quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;, &quot;PATCH&quot;)&#10;                        .allowedHeaders(&quot;*&quot;)&#10;                        .allowCredentials(false);&#10;            }&#10;        };&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/gms/config/DataInitializer.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/gms/config/DataInitializer.java" />
              <option name="updatedContent" value="package com.gms.config;&#10;&#10;import com.gms.model.Category;&#10;import com.gms.repository.CategoryRepository;&#10;import org.springframework.boot.CommandLineRunner;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;&#10;@Configuration&#10;public class DataInitializer {&#10;    @Bean&#10;    public CommandLineRunner initCategories(CategoryRepository categoryRepository) {&#10;        return args -&gt; {&#10;            List&lt;String&gt; defaultCategories = Arrays.asList(&quot;fruits&quot;, &quot;vegetables&quot;, &quot;beverages&quot;);&#10;            for (String name : defaultCategories) {&#10;                if (!categoryRepository.existsByNameIgnoreCase(name)) {&#10;                    Category category = new Category();&#10;                    category.setName(name);&#10;                    category.setDescription(name.substring(0, 1).toUpperCase() + name.substring(1));&#10;                    categoryRepository.save(category);&#10;                }&#10;            }&#10;        };&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/gms/config/GlobalExceptionHandler.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/gms/config/GlobalExceptionHandler.java" />
              <option name="updatedContent" value="package com.gms.config;&#10;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.ControllerAdvice;&#10;import org.springframework.web.bind.annotation.ExceptionHandler;&#10;&#10;@ControllerAdvice&#10;public class GlobalExceptionHandler {&#10;    @ExceptionHandler(IllegalArgumentException.class)&#10;    public ResponseEntity&lt;String&gt; handleIllegalArgumentException(IllegalArgumentException ex) {&#10;        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ex.getMessage());&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/gms/controller/ProductController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/gms/controller/ProductController.java" />
              <option name="originalContent" value="package com.gms.controller;&#10;&#10;import com.gms.dto.ProductCreateRequest;&#10;import com.gms.model.Product;&#10;import com.gms.service.ProductService;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/products&quot;)&#10;@RequiredArgsConstructor&#10;public class ProductController {&#10;    private final ProductService productService;&#10;&#10;    @GetMapping&#10;    public List&lt;Product&gt; getAllProducts() {&#10;        return productService.getAllProducts();&#10;    }&#10;&#10;    @PostMapping&#10;    public ResponseEntity&lt;Product&gt; createProduct(@RequestBody ProductCreateRequest request) {&#10;        return ResponseEntity.ok(productService.createProduct(request));&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Product&gt; updateProduct(@PathVariable Long id, @RequestBody Product product) {&#10;        return ResponseEntity.ok(productService.updateProduct(id, product));&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteProduct(@PathVariable Long id) {&#10;        productService.deleteProduct(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.gms.controller;&#10;&#10;import com.gms.dto.ProductCreateRequest;&#10;import com.gms.dto.ProductUpdateRequest;&#10;import com.gms.model.Product;&#10;import com.gms.service.ProductService;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/products&quot;)&#10;@RequiredArgsConstructor&#10;public class ProductController {&#10;    private final ProductService productService;&#10;&#10;    @GetMapping&#10;    public List&lt;Product&gt; getAllProducts() {&#10;        return productService.getAllProducts();&#10;    }&#10;&#10;    @PostMapping&#10;    public ResponseEntity&lt;Product&gt; createProduct(@RequestBody ProductCreateRequest request) {&#10;        return ResponseEntity.ok(productService.createProduct(request));&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Product&gt; updateProduct(@PathVariable Long id, @RequestBody ProductUpdateRequest request) {&#10;        return ResponseEntity.ok(productService.updateProduct(id, request));&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteProduct(@PathVariable Long id) {&#10;        productService.deleteProduct(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/gms/dto/ProductCreateRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/gms/dto/ProductCreateRequest.java" />
              <option name="updatedContent" value="package com.gms.dto;&#10;&#10;import lombok.Getter;&#10;import lombok.Setter;&#10;&#10;@Getter&#10;@Setter&#10;public class ProductCreateRequest {&#10;    private String name;&#10;    private String description;&#10;    private java.math.BigDecimal price;&#10;    private Long categoryId;&#10;    private Integer quantity;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/gms/dto/ProductUpdateRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/gms/dto/ProductUpdateRequest.java" />
              <option name="updatedContent" value="package com.gms.dto;&#10;&#10;import lombok.Getter;&#10;import lombok.Setter;&#10;import java.math.BigDecimal;&#10;&#10;@Getter&#10;@Setter&#10;public class ProductUpdateRequest {&#10;    private String name;&#10;    private String description;&#10;    private BigDecimal price;&#10;    private Long categoryId;&#10;    private Integer quantity;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/gms/model/Category.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/gms/model/Category.java" />
              <option name="originalContent" value="package com.gms.model;&#10;&#10;import com.fasterxml.jackson.annotation.JsonIgnore;&#10;import jakarta.persistence.*;&#10;import lombok.Data;&#10;&#10;import java.util.HashSet;&#10;import java.util.Set;&#10;&#10;@Data&#10;@Entity&#10;@Table(name = &quot;categories&quot;)&#10;public class Category {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(nullable = false, unique = true)&#10;    private String name;&#10;&#10;    private String description;&#10;&#10;    @OneToMany(mappedBy = &quot;category&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY)&#10;    @JsonIgnore&#10;    private Set&lt;Product&gt; products = new HashSet&lt;&gt;();&#10;&#10;    public void addProduct(Product product) {&#10;        products.add(product);&#10;        product.setCategory(this);&#10;    }&#10;&#10;    public void removeProduct(Product product) {&#10;        products.remove(product);&#10;        product.setCategory(null);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.gms.model;&#10;&#10;import com.fasterxml.jackson.annotation.JsonIgnore;&#10;import jakarta.persistence.*;&#10;import lombok.Getter;&#10;import lombok.Setter;&#10;import lombok.ToString;&#10;import lombok.EqualsAndHashCode;&#10;&#10;import java.util.HashSet;&#10;import java.util.Set;&#10;&#10;@Getter&#10;@Setter&#10;@ToString(exclude = &quot;products&quot;)&#10;@EqualsAndHashCode(exclude = &quot;products&quot;)&#10;@Entity&#10;@Table(name = &quot;categories&quot;)&#10;public class Category {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(nullable = false, unique = true)&#10;    private String name;&#10;&#10;    private String description;&#10;&#10;    @OneToMany(mappedBy = &quot;category&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY)&#10;    @JsonIgnore&#10;    private Set&lt;Product&gt; products = new HashSet&lt;&gt;();&#10;&#10;    public void addProduct(Product product) {&#10;        products.add(product);&#10;        product.setCategory(this);&#10;    }&#10;&#10;    public void removeProduct(Product product) {&#10;        products.remove(product);&#10;        product.setCategory(null);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/gms/model/Inventory.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/gms/model/Inventory.java" />
              <option name="originalContent" value="package com.gms.model;&#10;&#10;import com.fasterxml.jackson.annotation.JsonBackReference;&#10;import jakarta.persistence.*;&#10;import lombok.EqualsAndHashCode;&#10;import lombok.Getter;&#10;import lombok.Setter;&#10;import lombok.ToString;&#10;&#10;@Getter&#10;@Setter&#10;@ToString(exclude = &quot;product&quot;)&#10;@EqualsAndHashCode(exclude = &quot;product&quot;)&#10;@Entity&#10;@Table(name = &quot;inventory&quot;)&#10;public class Inventory {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @OneToOne&#10;    @JoinColumn(name = &quot;product_id&quot;, nullable = false)&#10;    @JsonBackReference&#10;    private Product product;&#10;&#10;    @Column(nullable = false)&#10;    private Integer quantity;&#10;    /*&#10;    @Column(name = &quot;min_stock_level&quot;)&#10;    private Integer minimumStockLevel;&#10;&#10;    @Column(name = &quot;max_stock_level&quot;)&#10;    private Integer maximumStockLevel;&#10;*/&#10;}&#10;" />
              <option name="updatedContent" value="package com.gms.model;&#10;&#10;import com.fasterxml.jackson.annotation.JsonIgnoreProperties;&#10;import jakarta.persistence.*;&#10;import lombok.EqualsAndHashCode;&#10;import lombok.Getter;&#10;import lombok.Setter;&#10;import lombok.ToString;&#10;&#10;@Getter&#10;@Setter&#10;@ToString(exclude = &quot;product&quot;)&#10;@EqualsAndHashCode(exclude = &quot;product&quot;)&#10;@Entity&#10;@Table(name = &quot;inventory&quot;)&#10;public class Inventory {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @OneToOne&#10;    @JoinColumn(name = &quot;product_id&quot;, nullable = false)&#10;    @JsonIgnoreProperties(&quot;inventory&quot;)&#10;    private Product product;&#10;&#10;    @Column(nullable = false)&#10;    private Integer quantity;&#10;    /*&#10;    @Column(name = &quot;min_stock_level&quot;)&#10;    private Integer minimumStockLevel;&#10;&#10;    @Column(name = &quot;max_stock_level&quot;)&#10;    private Integer maximumStockLevel;&#10;*/&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/gms/model/Product.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/gms/model/Product.java" />
              <option name="originalContent" value="package com.gms.model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.Getter;&#10;import lombok.Setter;&#10;import lombok.ToString;&#10;import lombok.EqualsAndHashCode;&#10;import java.math.BigDecimal;&#10;&#10;@Getter&#10;@Setter&#10;@ToString(exclude = &quot;category&quot;)&#10;@EqualsAndHashCode(exclude = {&quot;category&quot;, &quot;inventory&quot;})&#10;@Entity&#10;@Table(name = &quot;products&quot;)&#10;public class Product {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(nullable = false)&#10;    private String name;&#10;&#10;    private String description;&#10;&#10;    @Column(nullable = false)&#10;    private BigDecimal price;&#10;&#10;    @ManyToOne(fetch = FetchType.EAGER)&#10;    @JoinColumn(name = &quot;category_id&quot;, nullable = false)&#10;    private Category category;&#10;&#10;    @OneToOne(mappedBy = &quot;product&quot;)&#10;    private Inventory inventory;&#10;}&#10;" />
              <option name="updatedContent" value="package com.gms.model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.Getter;&#10;import lombok.Setter;&#10;import lombok.ToString;&#10;import lombok.EqualsAndHashCode;&#10;import java.math.BigDecimal;&#10;&#10;@Getter&#10;@Setter&#10;@ToString(exclude = &quot;category&quot;)&#10;@EqualsAndHashCode(exclude = {&quot;category&quot;, &quot;inventory&quot;})&#10;@Entity&#10;@Table(name = &quot;products&quot;)&#10;public class Product {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(nullable = false, unique = true)&#10;    private String name;&#10;&#10;    private String description;&#10;&#10;    @Column(nullable = false)&#10;    private BigDecimal price;&#10;&#10;    @ManyToOne(fetch = FetchType.EAGER)&#10;    @JoinColumn(name = &quot;category_id&quot;, nullable = false)&#10;    private Category category;&#10;&#10;    @OneToOne(mappedBy = &quot;product&quot;)&#10;    private Inventory inventory;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/gms/repository/CategoryRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/gms/repository/CategoryRepository.java" />
              <option name="originalContent" value="package com.gms.repository;&#10;&#10;import com.gms.model.Category;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;@Repository&#10;public interface CategoryRepository extends JpaRepository&lt;Category, Long&gt; {&#10;    boolean existsByName(String name);&#10;}&#10;" />
              <option name="updatedContent" value="package com.gms.repository;&#10;&#10;import com.gms.model.Category;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;@Repository&#10;public interface CategoryRepository extends JpaRepository&lt;Category, Long&gt; {&#10;    boolean existsByName(String name);&#10;    boolean existsByNameIgnoreCase(String name);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/gms/repository/ProductRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/gms/repository/ProductRepository.java" />
              <option name="originalContent" value="package com.gms.repository;&#10;&#10;import com.gms.model.Product;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;@Repository&#10;public interface ProductRepository extends JpaRepository&lt;Product, Long&gt; {&#10;}&#10;" />
              <option name="updatedContent" value="package com.gms.repository;&#10;&#10;import com.gms.model.Product;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;@Repository&#10;public interface ProductRepository extends JpaRepository&lt;Product, Long&gt; {&#10;    Product findByNameIgnoreCase(String name);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/gms/service/InventoryService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/gms/service/InventoryService.java" />
              <option name="originalContent" value="package com.gms.service;&#10;&#10;import jakarta.persistence.EntityNotFoundException;&#10;import lombok.RequiredArgsConstructor;&#10;import com.gms.model.Inventory;&#10;import com.gms.repository.InventoryRepository;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.util.List;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;public class InventoryService {&#10;    private final InventoryRepository inventoryRepository;&#10;&#10;    public List&lt;Inventory&gt; getAllInventory() {&#10;        return inventoryRepository.findAll();&#10;    }&#10;&#10;    public Inventory getInventoryById(Long id) {&#10;        return inventoryRepository.findById(id)&#10;                .orElseThrow(() -&gt; new EntityNotFoundException(&quot;Inventory not found with id: &quot; + id));&#10;    }&#10;&#10;    public Inventory getInventoryByProductId(Long productId) {&#10;        Inventory inventory = inventoryRepository.findByProductId(productId);&#10;        if (inventory == null) {&#10;            throw new EntityNotFoundException(&quot;Inventory not found for product id: &quot; + productId);&#10;        }&#10;        return inventory;&#10;    }&#10;&#10;    @Transactional&#10;    public Inventory createInventory(Inventory inventory) {&#10;        return inventoryRepository.save(inventory);&#10;    }&#10;&#10;    @Transactional&#10;    public Inventory updateInventory(Long id, Inventory inventoryDetails) {&#10;        Inventory inventory = getInventoryById(id);&#10;        inventory.setQuantity(inventoryDetails.getQuantity());&#10;        return inventoryRepository.save(inventory);&#10;    }&#10;&#10;    @Transactional&#10;    public Inventory updateStock(Long id, Integer quantityChange) {&#10;        Inventory inventory = getInventoryById(id);&#10;        int newQuantity = inventory.getQuantity() + quantityChange;&#10;&#10;        if (newQuantity &lt; 0) {&#10;            throw new IllegalArgumentException(&quot;Insufficient stock&quot;);&#10;        }&#10;&#10;        inventory.setQuantity(newQuantity);&#10;        return inventoryRepository.save(inventory);&#10;    }&#10;&#10;    @Transactional&#10;    public void deleteInventory(Long id) {&#10;        if (!inventoryRepository.existsById(id)) {&#10;            throw new EntityNotFoundException(&quot;Inventory not found with id: &quot; + id);&#10;        }&#10;        inventoryRepository.deleteById(id);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.gms.service;&#10;&#10;import jakarta.persistence.EntityNotFoundException;&#10;import lombok.RequiredArgsConstructor;&#10;import com.gms.model.Inventory;&#10;import com.gms.repository.InventoryRepository;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.util.List;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;public class InventoryService {&#10;    private final InventoryRepository inventoryRepository;&#10;&#10;    public List&lt;Inventory&gt; getAllInventory() {&#10;        return inventoryRepository.findAll();&#10;    }&#10;&#10;    public Inventory getInventoryById(Long id) {&#10;        return inventoryRepository.findById(id)&#10;                .orElseThrow(() -&gt; new EntityNotFoundException(&quot;Inventory not found with id: &quot; + id));&#10;    }&#10;&#10;    public Inventory getInventoryByProductId(Long productId) {&#10;        Inventory inventory = inventoryRepository.findByProductId(productId);&#10;        if (inventory == null) {&#10;            throw new EntityNotFoundException(&quot;Inventory not found for product id: &quot; + productId);&#10;        }&#10;        return inventory;&#10;    }&#10;&#10;    @Transactional&#10;    public Inventory createInventory(Inventory inventory) {&#10;        Inventory existingInventory = inventoryRepository.findByProductId(inventory.getProduct().getId());&#10;        if (existingInventory != null) {&#10;            // If inventory exists, update the quantity&#10;            existingInventory.setQuantity(existingInventory.getQuantity() + inventory.getQuantity());&#10;            return inventoryRepository.save(existingInventory);&#10;        }&#10;        // If not exists, create new inventory&#10;        return inventoryRepository.save(inventory);&#10;    }&#10;&#10;    @Transactional&#10;    public Inventory updateInventory(Long id, Inventory inventoryDetails) {&#10;        Inventory inventory = getInventoryById(id);&#10;        // Optionally, check if product is being changed and handle accordingly&#10;        inventory.setQuantity(inventoryDetails.getQuantity());&#10;        return inventoryRepository.save(inventory);&#10;    }&#10;&#10;    @Transactional&#10;    public Inventory updateStock(Long id, Integer quantityChange) {&#10;        Inventory inventory = getInventoryById(id);&#10;        int newQuantity = inventory.getQuantity() + quantityChange;&#10;&#10;        if (newQuantity &lt; 0) {&#10;            throw new IllegalArgumentException(&quot;Insufficient stock&quot;);&#10;        }&#10;&#10;        inventory.setQuantity(newQuantity);&#10;        return inventoryRepository.save(inventory);&#10;    }&#10;&#10;    @Transactional&#10;    public void deleteInventory(Long id) {&#10;        if (!inventoryRepository.existsById(id)) {&#10;            throw new EntityNotFoundException(&quot;Inventory not found with id: &quot; + id);&#10;        }&#10;        inventoryRepository.deleteById(id);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/gms/service/ProductService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/gms/service/ProductService.java" />
              <option name="originalContent" value="package com.gms.service;&#10;&#10;import jakarta.persistence.EntityNotFoundException;&#10;import lombok.RequiredArgsConstructor;&#10;import com.gms.model.Product;&#10;import com.gms.model.Category;&#10;import com.gms.model.Inventory;&#10;import com.gms.repository.ProductRepository;&#10;import com.gms.repository.CategoryRepository;&#10;import com.gms.repository.InventoryRepository;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;import java.util.List;&#10;import com.gms.dto.ProductCreateRequest;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;public class ProductService {&#10;    private final ProductRepository productRepository;&#10;    private final CategoryRepository categoryRepository;&#10;    private final InventoryService inventoryService;&#10;    private final InventoryRepository inventoryRepository;&#10;&#10;    public List&lt;Product&gt; getAllProducts() {&#10;        return productRepository.findAll();&#10;    }&#10;&#10;    @Transactional&#10;    public Product createProduct(ProductCreateRequest request) {&#10;        Category category = categoryRepository.findById(request.getCategoryId())&#10;                .orElseThrow(() -&gt; new EntityNotFoundException(&quot;Category not found&quot;));&#10;&#10;        // Use repository method for efficient lookup&#10;        Product existingProduct = productRepository.findByNameIgnoreCase(request.getName());&#10;&#10;        if (existingProduct != null) {&#10;            // If product exists, update inventory quantity&#10;            Inventory existingInventory = inventoryRepository.findByProductId(existingProduct.getId());&#10;            if (existingInventory != null) {&#10;                existingInventory.setQuantity(existingInventory.getQuantity() + (request.getQuantity() != null ? request.getQuantity() : 1));&#10;                inventoryRepository.save(existingInventory);&#10;                return existingProduct;&#10;            }&#10;        }&#10;&#10;        // If product does not exist, create new product first&#10;        Product product = new Product();&#10;        product.setName(request.getName());&#10;        product.setDescription(request.getDescription());&#10;        product.setPrice(request.getPrice());&#10;        product.setCategory(category);&#10;        product.setInventory(null); // Avoid transient reference&#10;        category.addProduct(product);&#10;        categoryRepository.save(category);&#10;        Product savedProduct = productRepository.save(product);&#10;        // Then create inventory and link to product&#10;        Inventory inventory = new Inventory();&#10;        inventory.setProduct(savedProduct);&#10;        inventory.setQuantity(request.getQuantity() != null ? request.getQuantity() : 1);&#10;        inventoryService.createInventory(inventory);&#10;        return savedProduct;&#10;    }&#10;&#10;    public Product getProductById(Long id) {&#10;        return productRepository.findById(id)&#10;                .orElseThrow(() -&gt; new EntityNotFoundException(&quot;Product not found with id: &quot; + id));&#10;    }&#10;&#10;    @Transactional&#10;    public Product updateProduct(Long id, Product productDetails) {&#10;        Product product = getProductById(id);&#10;        if (productDetails.getCategory() != null &amp;&amp; productDetails.getCategory().getId() != null) {&#10;            Category category = categoryRepository.findById(productDetails.getCategory().getId())&#10;                    .orElseThrow(() -&gt; new EntityNotFoundException(&quot;Category not found&quot;));&#10;            product.setCategory(category);&#10;        }&#10;        product.setName(productDetails.getName());&#10;        product.setDescription(productDetails.getDescription());&#10;        product.setPrice(productDetails.getPrice());&#10;        return productRepository.save(product);&#10;    }&#10;&#10;    @Transactional&#10;    public void deleteProduct(Long id) {&#10;        Product product = getProductById(id);&#10;        // Delete associated inventory first&#10;        Inventory inventory = inventoryRepository.findByProductId(product.getId());&#10;        if (inventory != null) {&#10;            inventoryRepository.delete(inventory);&#10;        }&#10;        productRepository.delete(product);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.gms.service;&#10;&#10;import jakarta.persistence.EntityNotFoundException;&#10;import lombok.RequiredArgsConstructor;&#10;import com.gms.model.Product;&#10;import com.gms.model.Category;&#10;import com.gms.model.Inventory;&#10;import com.gms.repository.ProductRepository;&#10;import com.gms.repository.CategoryRepository;&#10;import com.gms.repository.InventoryRepository;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;import java.util.List;&#10;import com.gms.dto.ProductCreateRequest;&#10;import com.gms.dto.ProductUpdateRequest;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;public class ProductService {&#10;    private final ProductRepository productRepository;&#10;    private final CategoryRepository categoryRepository;&#10;    private final InventoryService inventoryService;&#10;    private final InventoryRepository inventoryRepository;&#10;&#10;    public List&lt;Product&gt; getAllProducts() {&#10;        return productRepository.findAll();&#10;    }&#10;&#10;    @Transactional&#10;    public Product createProduct(ProductCreateRequest request) {&#10;        Category category = categoryRepository.findById(request.getCategoryId())&#10;                .orElseThrow(() -&gt; new EntityNotFoundException(&quot;Category not found&quot;));&#10;&#10;        // Use repository method for efficient lookup&#10;        Product existingProduct = productRepository.findByNameIgnoreCase(request.getName());&#10;&#10;        if (existingProduct != null) {&#10;            // If product exists, do not allow duplicate creation&#10;            throw new IllegalArgumentException(&quot;Product with name '&quot; + request.getName() + &quot;' already exists.&quot;);&#10;        }&#10;&#10;        // If product does not exist, create new product first&#10;        Product product = new Product();&#10;        product.setName(request.getName());&#10;        product.setDescription(request.getDescription());&#10;        product.setPrice(request.getPrice());&#10;        product.setCategory(category);&#10;        product.setInventory(null); // Avoid transient reference&#10;        category.addProduct(product);&#10;        categoryRepository.save(category);&#10;        Product savedProduct = productRepository.save(product);&#10;        // Then create inventory and link to product&#10;        Inventory inventory = new Inventory();&#10;        inventory.setProduct(savedProduct);&#10;        inventory.setQuantity(request.getQuantity() != null ? request.getQuantity() : 1);&#10;        inventoryService.createInventory(inventory);&#10;        return savedProduct;&#10;    }&#10;&#10;    public Product getProductById(Long id) {&#10;        return productRepository.findById(id)&#10;                .orElseThrow(() -&gt; new EntityNotFoundException(&quot;Product not found with id: &quot; + id));&#10;    }&#10;&#10;    @Transactional&#10;    public Product updateProduct(Long id, ProductUpdateRequest request) {&#10;        Product product = getProductById(id);&#10;        if (request.getCategoryId() != null) {&#10;            Category category = categoryRepository.findById(request.getCategoryId())&#10;                    .orElseThrow(() -&gt; new EntityNotFoundException(&quot;Category not found&quot;));&#10;            product.setCategory(category);&#10;        }&#10;        if (request.getName() != null) product.setName(request.getName());&#10;        if (request.getDescription() != null) product.setDescription(request.getDescription());&#10;        if (request.getPrice() != null) product.setPrice(request.getPrice());&#10;        Product updatedProduct = productRepository.save(product);&#10;&#10;        // Update inventory quantity if provided&#10;        if (request.getQuantity() != null) {&#10;            Inventory inventory = inventoryRepository.findByProductId(product.getId());&#10;            if (inventory != null) {&#10;                inventory.setQuantity(request.getQuantity());&#10;                inventoryRepository.save(inventory);&#10;            }&#10;        }&#10;        return updatedProduct;&#10;    }&#10;&#10;    @Transactional&#10;    public void deleteProduct(Long id) {&#10;        Product product = getProductById(id);&#10;        // Delete associated inventory first&#10;        Inventory inventory = inventoryRepository.findByProductId(product.getId());&#10;        if (inventory != null) {&#10;            inventoryRepository.delete(inventory);&#10;        }&#10;        productRepository.delete(product);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/GmsApplication.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/GmsApplication.java" />
              <option name="originalContent" value="package org.example;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;&#10;@SpringBootApplication&#10;public class GmsApplication {&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(GmsApplication.class, args);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.gms;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;&#10;@SpringBootApplication&#10;public class GmsApplication {&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(GmsApplication.class, args);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/Main.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/Main.java" />
              <option name="originalContent" value="package org.example;&#10;&#10;//TIP To &lt;b&gt;Run&lt;/b&gt; code, press &lt;shortcut actionId=&quot;Run&quot;/&gt; or&#10;// click the &lt;icon src=&quot;AllIcons.Actions.Execute&quot;/&gt; icon in the gutter.&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        //TIP Press &lt;shortcut actionId=&quot;ShowIntentionActions&quot;/&gt; with your caret at the highlighted text&#10;        // to see how IntelliJ IDEA suggests fixing it.&#10;        System.out.printf(&quot;Hello and welcome!&quot;);&#10;&#10;        for (int i = 1; i &lt;= 5; i++) {&#10;            //TIP Press &lt;shortcut actionId=&quot;Debug&quot;/&gt; to start debugging your code. We have set one &lt;icon src=&quot;AllIcons.Debugger.Db_set_breakpoint&quot;/&gt; breakpoint&#10;            // for you, but you can always add more by pressing &lt;shortcut actionId=&quot;ToggleLineBreakpoint&quot;/&gt;.&#10;            System.out.println(&quot;i = &quot; + i);&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.example;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;&#10;@SpringBootApplication&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(Main.class, args);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/controller/CategoryController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/controller/CategoryController.java" />
              <option name="updatedContent" value="package org.example.controller;&#10;&#10;import lombok.RequiredArgsConstructor;&#10;import org.example.model.Category;&#10;import org.example.service.CategoryService;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/categories&quot;)&#10;@RequiredArgsConstructor&#10;public class CategoryController {&#10;    private final CategoryService categoryService;&#10;&#10;    @GetMapping&#10;    public List&lt;Category&gt; getAllCategories() {&#10;        return categoryService.getAllCategories();&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Category&gt; getCategoryById(@PathVariable Long id) {&#10;        return ResponseEntity.ok(categoryService.getCategoryById(id));&#10;    }&#10;&#10;    @PostMapping&#10;    public ResponseEntity&lt;Category&gt; createCategory(@RequestBody Category category) {&#10;        return ResponseEntity.ok(categoryService.createCategory(category));&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Category&gt; updateCategory(@PathVariable Long id, @RequestBody Category category) {&#10;        return ResponseEntity.ok(categoryService.updateCategory(id, category));&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteCategory(@PathVariable Long id) {&#10;        categoryService.deleteCategory(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/controller/InventoryController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/controller/InventoryController.java" />
              <option name="updatedContent" value="package org.example.controller;&#10;&#10;import lombok.RequiredArgsConstructor;&#10;import org.example.model.Inventory;&#10;import org.example.service.InventoryService;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/inventory&quot;)&#10;@RequiredArgsConstructor&#10;public class InventoryController {&#10;    private final InventoryService inventoryService;&#10;&#10;    @GetMapping&#10;    public List&lt;Inventory&gt; getAllInventory() {&#10;        return inventoryService.getAllInventory();&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Inventory&gt; getInventoryById(@PathVariable Long id) {&#10;        return ResponseEntity.ok(inventoryService.getInventoryById(id));&#10;    }&#10;&#10;    @GetMapping(&quot;/product/{productId}&quot;)&#10;    public ResponseEntity&lt;Inventory&gt; getInventoryByProductId(@PathVariable Long productId) {&#10;        return ResponseEntity.ok(inventoryService.getInventoryByProductId(productId));&#10;    }&#10;&#10;    @PostMapping&#10;    public ResponseEntity&lt;Inventory&gt; createInventory(@RequestBody Inventory inventory) {&#10;        return ResponseEntity.ok(inventoryService.createInventory(inventory));&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Inventory&gt; updateInventory(@PathVariable Long id, @RequestBody Inventory inventory) {&#10;        return ResponseEntity.ok(inventoryService.updateInventory(id, inventory));&#10;    }&#10;&#10;    @PatchMapping(&quot;/{id}/stock&quot;)&#10;    public ResponseEntity&lt;Inventory&gt; updateStock(@PathVariable Long id, @RequestParam Integer quantityChange) {&#10;        return ResponseEntity.ok(inventoryService.updateStock(id, quantityChange));&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteInventory(@PathVariable Long id) {&#10;        inventoryService.deleteInventory(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/controller/OrderController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/controller/OrderController.java" />
              <option name="updatedContent" value="package org.example.controller;&#10;&#10;import lombok.RequiredArgsConstructor;&#10;import org.example.model.Order;&#10;import org.example.service.OrderService;&#10;import org.springframework.format.annotation.DateTimeFormat;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/orders&quot;)&#10;@RequiredArgsConstructor&#10;public class OrderController {&#10;    private final OrderService orderService;&#10;&#10;    @GetMapping&#10;    public List&lt;Order&gt; getAllOrders() {&#10;        return orderService.getAllOrders();&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Order&gt; getOrderById(@PathVariable Long id) {&#10;        return ResponseEntity.ok(orderService.getOrderById(id));&#10;    }&#10;&#10;    @GetMapping(&quot;/by-date-range&quot;)&#10;    public List&lt;Order&gt; getOrdersByDateRange(&#10;            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime startDate,&#10;            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime endDate) {&#10;        return orderService.getOrdersByDateRange(startDate, endDate);&#10;    }&#10;&#10;    @GetMapping(&quot;/by-status/{status}&quot;)&#10;    public List&lt;Order&gt; getOrdersByStatus(@PathVariable Order.OrderStatus status) {&#10;        return orderService.getOrdersByStatus(status);&#10;    }&#10;&#10;    @PostMapping&#10;    public ResponseEntity&lt;Order&gt; createOrder(@RequestBody Order order) {&#10;        return ResponseEntity.ok(orderService.createOrder(order));&#10;    }&#10;&#10;    @PatchMapping(&quot;/{id}/status&quot;)&#10;    public ResponseEntity&lt;Order&gt; updateOrderStatus(&#10;            @PathVariable Long id,&#10;            @RequestParam Order.OrderStatus status) {&#10;        return ResponseEntity.ok(orderService.updateOrderStatus(id, status));&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteOrder(@PathVariable Long id) {&#10;        orderService.deleteOrder(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/controller/ProductController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/controller/ProductController.java" />
              <option name="updatedContent" value="package org.example.controller;&#10;&#10;import lombok.RequiredArgsConstructor;&#10;import org.example.model.Product;&#10;import org.example.service.ProductService;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/products&quot;)&#10;@RequiredArgsConstructor&#10;public class ProductController {&#10;    private final ProductService productService;&#10;&#10;    @GetMapping&#10;    public List&lt;Product&gt; getAllProducts() {&#10;        return productService.getAllProducts();&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Product&gt; getProductById(@PathVariable Long id) {&#10;        return ResponseEntity.ok(productService.getProductById(id));&#10;    }&#10;&#10;    @PostMapping&#10;    public ResponseEntity&lt;Product&gt; createProduct(@RequestBody Product product) {&#10;        return ResponseEntity.ok(productService.createProduct(product));&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Product&gt; updateProduct(@PathVariable Long id, @RequestBody Product product) {&#10;        return ResponseEntity.ok(productService.updateProduct(id, product));&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteProduct(@PathVariable Long id) {&#10;        productService.deleteProduct(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/model/Category.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/model/Category.java" />
              <option name="originalContent" value="package org.example.model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.Data;&#10;&#10;import java.util.Set;&#10;&#10;@Data&#10;@Entity&#10;@Table(name = &quot;categories&quot;)&#10;public class Category {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(nullable = false, unique = true)&#10;    private String name;&#10;&#10;    private String description;&#10;&#10;    @OneToMany(mappedBy = &quot;category&quot;)&#10;    private Set&lt;Product&gt; products;&#10;}&#10;" />
              <option name="updatedContent" value="package com.gms.model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.Data;&#10;&#10;import java.util.Set;&#10;&#10;@Data&#10;@Entity&#10;@Table(name = &quot;categories&quot;)&#10;public class Category {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(nullable = false, unique = true)&#10;    private String name;&#10;&#10;    private String description;&#10;&#10;    @OneToMany(mappedBy = &quot;category&quot;)&#10;    private Set&lt;Product&gt; products;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/model/Inventory.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/model/Inventory.java" />
              <option name="updatedContent" value="package org.example.model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.Data;&#10;&#10;@Data&#10;@Entity&#10;@Table(name = &quot;inventory&quot;)&#10;public class Inventory {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @OneToOne&#10;    @JoinColumn(name = &quot;product_id&quot;, nullable = false)&#10;    private Product product;&#10;&#10;    @Column(nullable = false)&#10;    private Integer quantity;&#10;&#10;    @Column(name = &quot;min_stock_level&quot;)&#10;    private Integer minimumStockLevel;&#10;&#10;    @Column(name = &quot;max_stock_level&quot;)&#10;    private Integer maximumStockLevel;&#10;&#10;    private String location;&#10;&#10;    @Column(name = &quot;last_restock_date&quot;)&#10;    private java.time.LocalDateTime lastRestockDate;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/model/Order.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/model/Order.java" />
              <option name="updatedContent" value="package org.example.model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.Data;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDateTime;&#10;import java.util.Set;&#10;&#10;@Data&#10;@Entity&#10;@Table(name = &quot;orders&quot;)&#10;public class Order {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(nullable = false)&#10;    private String orderNumber;&#10;&#10;    @Column(nullable = false)&#10;    private LocalDateTime orderDate;&#10;&#10;    @Column(nullable = false)&#10;    private BigDecimal totalAmount;&#10;&#10;    @Enumerated(EnumType.STRING)&#10;    private OrderStatus status;&#10;&#10;    @OneToMany(mappedBy = &quot;order&quot;, cascade = CascadeType.ALL)&#10;    private Set&lt;OrderItem&gt; items;&#10;&#10;    public enum OrderStatus {&#10;        PENDING, PROCESSING, COMPLETED, CANCELLED&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/model/OrderItem.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/model/OrderItem.java" />
              <option name="updatedContent" value="package org.example.model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.Data;&#10;import java.math.BigDecimal;&#10;&#10;@Data&#10;@Entity&#10;@Table(name = &quot;order_items&quot;)&#10;public class OrderItem {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;order_id&quot;, nullable = false)&#10;    private Order order;&#10;&#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;product_id&quot;, nullable = false)&#10;    private Product product;&#10;&#10;    @Column(nullable = false)&#10;    private Integer quantity;&#10;&#10;    @Column(nullable = false)&#10;    private BigDecimal unitPrice;&#10;&#10;    @Column(nullable = false)&#10;    private BigDecimal subtotal;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/model/Product.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/model/Product.java" />
              <option name="updatedContent" value="package org.example.model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.Data;&#10;import java.math.BigDecimal;&#10;&#10;@Data&#10;@Entity&#10;@Table(name = &quot;products&quot;)&#10;public class Product {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(nullable = false)&#10;    private String name;&#10;&#10;    private String description;&#10;&#10;    @Column(nullable = false)&#10;    private BigDecimal price;&#10;&#10;    @Column(nullable = false)&#10;    private String barcode;&#10;&#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;category_id&quot;, nullable = false)&#10;    private Category category;&#10;&#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;supplier_id&quot;)&#10;    private Supplier supplier;&#10;&#10;    @OneToOne(mappedBy = &quot;product&quot;)&#10;    private Inventory inventory;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/model/Supplier.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/model/Supplier.java" />
              <option name="updatedContent" value="package org.example.model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.Data;&#10;import java.util.Set;&#10;&#10;@Data&#10;@Entity&#10;@Table(name = &quot;suppliers&quot;)&#10;public class Supplier {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(nullable = false)&#10;    private String name;&#10;&#10;    private String contactPerson;&#10;&#10;    @Column(nullable = false)&#10;    private String email;&#10;&#10;    private String phone;&#10;&#10;    private String address;&#10;&#10;    @OneToMany(mappedBy = &quot;supplier&quot;)&#10;    private Set&lt;Product&gt; products;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/repository/CategoryRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/repository/CategoryRepository.java" />
              <option name="originalContent" value="package org.example.repository;&#10;&#10;import org.example.model.Category;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;@Repository&#10;public interface CategoryRepository extends JpaRepository&lt;Category, Long&gt; {&#10;    boolean existsByName(String name);&#10;}&#10;" />
              <option name="updatedContent" value="package com.gms.repository;&#10;&#10;import com.gms.model.Category;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;@Repository&#10;public interface CategoryRepository extends JpaRepository&lt;Category, Long&gt; {&#10;    boolean existsByName(String name);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/repository/InventoryRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/repository/InventoryRepository.java" />
              <option name="updatedContent" value="package org.example.repository;&#10;&#10;import org.example.model.Inventory;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;@Repository&#10;public interface InventoryRepository extends JpaRepository&lt;Inventory, Long&gt; {&#10;    Inventory findByProductId(Long productId);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/repository/OrderRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/repository/OrderRepository.java" />
              <option name="updatedContent" value="package org.example.repository;&#10;&#10;import org.example.model.Order;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;&#10;@Repository&#10;public interface OrderRepository extends JpaRepository&lt;Order, Long&gt; {&#10;    List&lt;Order&gt; findByOrderDateBetween(LocalDateTime startDate, LocalDateTime endDate);&#10;    List&lt;Order&gt; findByStatus(Order.OrderStatus status);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/repository/ProductRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/repository/ProductRepository.java" />
              <option name="updatedContent" value="package org.example.repository;&#10;&#10;import org.example.model.Product;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;@Repository&#10;public interface ProductRepository extends JpaRepository&lt;Product, Long&gt; {&#10;    // Custom query methods can be added here&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/repository/SupplierRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/repository/SupplierRepository.java" />
              <option name="updatedContent" value="package org.example.repository;&#10;&#10;import org.example.model.Supplier;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;@Repository&#10;public interface SupplierRepository extends JpaRepository&lt;Supplier, Long&gt; {&#10;    boolean existsByEmail(String email);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/service/CategoryService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/service/CategoryService.java" />
              <option name="originalContent" value="package org.example.service;&#10;&#10;import jakarta.persistence.EntityNotFoundException;&#10;import lombok.RequiredArgsConstructor;&#10;import org.example.model.Category;&#10;import org.example.repository.CategoryRepository;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.util.List;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;public class CategoryService {&#10;    private final CategoryRepository categoryRepository;&#10;&#10;    public List&lt;Category&gt; getAllCategories() {&#10;        return categoryRepository.findAll();&#10;    }&#10;&#10;    public Category getCategoryById(Long id) {&#10;        return categoryRepository.findById(id)&#10;                .orElseThrow(() -&gt; new EntityNotFoundException(&quot;Category not found with id: &quot; + id));&#10;    }&#10;&#10;    @Transactional&#10;    public Category createCategory(Category category) {&#10;        if (categoryRepository.existsByName(category.getName())) {&#10;            throw new IllegalArgumentException(&quot;Category with this name already exists&quot;);&#10;        }&#10;        return categoryRepository.save(category);&#10;    }&#10;&#10;    @Transactional&#10;    public Category updateCategory(Long id, Category categoryDetails) {&#10;        Category category = getCategoryById(id);&#10;&#10;        if (!category.getName().equals(categoryDetails.getName()) &amp;&amp;&#10;            categoryRepository.existsByName(categoryDetails.getName())) {&#10;            throw new IllegalArgumentException(&quot;Category with this name already exists&quot;);&#10;        }&#10;&#10;        category.setName(categoryDetails.getName());&#10;        category.setDescription(categoryDetails.getDescription());&#10;&#10;        return categoryRepository.save(category);&#10;    }&#10;&#10;    @Transactional&#10;    public void deleteCategory(Long id) {&#10;        Category category = getCategoryById(id);&#10;        if (!category.getProducts().isEmpty()) {&#10;            throw new IllegalStateException(&quot;Cannot delete category with associated products&quot;);&#10;        }&#10;        categoryRepository.deleteById(id);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.gms.service;&#10;&#10;import com.gms.model.Category;&#10;import com.gms.repository.CategoryRepository;&#10;import jakarta.persistence.EntityNotFoundException;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.util.List;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;public class CategoryService {&#10;    private final CategoryRepository categoryRepository;&#10;&#10;    public List&lt;Category&gt; getAllCategories() {&#10;        return categoryRepository.findAll();&#10;    }&#10;&#10;    public Category getCategoryById(Long id) {&#10;        return categoryRepository.findById(id)&#10;                .orElseThrow(() -&gt; new EntityNotFoundException(&quot;Category not found with id: &quot; + id));&#10;    }&#10;&#10;    @Transactional&#10;    public Category createCategory(Category category) {&#10;        if (categoryRepository.existsByName(category.getName())) {&#10;            throw new IllegalArgumentException(&quot;Category with this name already exists&quot;);&#10;        }&#10;        return categoryRepository.save(category);&#10;    }&#10;&#10;    @Transactional&#10;    public Category updateCategory(Long id, Category categoryDetails) {&#10;        Category category = getCategoryById(id);&#10;&#10;        if (!category.getName().equals(categoryDetails.getName()) &amp;&amp;&#10;            categoryRepository.existsByName(categoryDetails.getName())) {&#10;            throw new IllegalArgumentException(&quot;Category with this name already exists&quot;);&#10;        }&#10;&#10;        category.setName(categoryDetails.getName());&#10;        category.setDescription(categoryDetails.getDescription());&#10;&#10;        return categoryRepository.save(category);&#10;    }&#10;&#10;    @Transactional&#10;    public void deleteCategory(Long id) {&#10;        Category category = getCategoryById(id);&#10;        if (!category.getProducts().isEmpty()) {&#10;            throw new IllegalStateException(&quot;Cannot delete category with associated products&quot;);&#10;        }&#10;        categoryRepository.deleteById(id);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/service/InventoryService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/service/InventoryService.java" />
              <option name="updatedContent" value="package org.example.service;&#10;&#10;import jakarta.persistence.EntityNotFoundException;&#10;import lombok.RequiredArgsConstructor;&#10;import org.example.model.Inventory;&#10;import org.example.repository.InventoryRepository;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;public class InventoryService {&#10;    private final InventoryRepository inventoryRepository;&#10;&#10;    public List&lt;Inventory&gt; getAllInventory() {&#10;        return inventoryRepository.findAll();&#10;    }&#10;&#10;    public Inventory getInventoryById(Long id) {&#10;        return inventoryRepository.findById(id)&#10;                .orElseThrow(() -&gt; new EntityNotFoundException(&quot;Inventory not found with id: &quot; + id));&#10;    }&#10;&#10;    public Inventory getInventoryByProductId(Long productId) {&#10;        Inventory inventory = inventoryRepository.findByProductId(productId);&#10;        if (inventory == null) {&#10;            throw new EntityNotFoundException(&quot;Inventory not found for product id: &quot; + productId);&#10;        }&#10;        return inventory;&#10;    }&#10;&#10;    @Transactional&#10;    public Inventory createInventory(Inventory inventory) {&#10;        inventory.setLastRestockDate(LocalDateTime.now());&#10;        return inventoryRepository.save(inventory);&#10;    }&#10;&#10;    @Transactional&#10;    public Inventory updateInventory(Long id, Inventory inventoryDetails) {&#10;        Inventory inventory = getInventoryById(id);&#10;        &#10;        inventory.setQuantity(inventoryDetails.getQuantity());&#10;        inventory.setMinimumStockLevel(inventoryDetails.getMinimumStockLevel());&#10;        inventory.setMaximumStockLevel(inventoryDetails.getMaximumStockLevel());&#10;        inventory.setLocation(inventoryDetails.getLocation());&#10;        &#10;        return inventoryRepository.save(inventory);&#10;    }&#10;&#10;    @Transactional&#10;    public Inventory updateStock(Long id, Integer quantityChange) {&#10;        Inventory inventory = getInventoryById(id);&#10;        int newQuantity = inventory.getQuantity() + quantityChange;&#10;        &#10;        if (newQuantity &lt; 0) {&#10;            throw new IllegalArgumentException(&quot;Insufficient stock&quot;);&#10;        }&#10;        &#10;        inventory.setQuantity(newQuantity);&#10;        if (quantityChange &gt; 0) {&#10;            inventory.setLastRestockDate(LocalDateTime.now());&#10;        }&#10;        &#10;        return inventoryRepository.save(inventory);&#10;    }&#10;&#10;    @Transactional&#10;    public void deleteInventory(Long id) {&#10;        if (!inventoryRepository.existsById(id)) {&#10;            throw new EntityNotFoundException(&quot;Inventory not found with id: &quot; + id);&#10;        }&#10;        inventoryRepository.deleteById(id);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/service/OrderService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/service/OrderService.java" />
              <option name="updatedContent" value="package org.example.service;&#10;&#10;import jakarta.persistence.EntityNotFoundException;&#10;import lombok.RequiredArgsConstructor;&#10;import org.example.model.Order;&#10;import org.example.model.OrderItem;&#10;import org.example.model.Inventory;&#10;import org.example.repository.OrderRepository;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;public class OrderService {&#10;    private final OrderRepository orderRepository;&#10;    private final InventoryService inventoryService;&#10;&#10;    public List&lt;Order&gt; getAllOrders() {&#10;        return orderRepository.findAll();&#10;    }&#10;&#10;    public Order getOrderById(Long id) {&#10;        return orderRepository.findById(id)&#10;                .orElseThrow(() -&gt; new EntityNotFoundException(&quot;Order not found with id: &quot; + id));&#10;    }&#10;&#10;    public List&lt;Order&gt; getOrdersByDateRange(LocalDateTime startDate, LocalDateTime endDate) {&#10;        return orderRepository.findByOrderDateBetween(startDate, endDate);&#10;    }&#10;&#10;    public List&lt;Order&gt; getOrdersByStatus(Order.OrderStatus status) {&#10;        return orderRepository.findByStatus(status);&#10;    }&#10;&#10;    @Transactional&#10;    public Order createOrder(Order order) {&#10;        order.setOrderDate(LocalDateTime.now());&#10;        order.setStatus(Order.OrderStatus.PENDING);&#10;        &#10;        // Update inventory for each order item&#10;        for (OrderItem item : order.getItems()) {&#10;            Inventory inventory = inventoryService.getInventoryByProductId(item.getProduct().getId());&#10;            inventoryService.updateStock(inventory.getId(), -item.getQuantity());&#10;        }&#10;        &#10;        return orderRepository.save(order);&#10;    }&#10;&#10;    @Transactional&#10;    public Order updateOrderStatus(Long id, Order.OrderStatus status) {&#10;        Order order = getOrderById(id);&#10;        order.setStatus(status);&#10;        return orderRepository.save(order);&#10;    }&#10;&#10;    @Transactional&#10;    public void deleteOrder(Long id) {&#10;        Order order = getOrderById(id);&#10;        &#10;        // Restore inventory if order is cancelled&#10;        if (order.getStatus() != Order.OrderStatus.COMPLETED) {&#10;            for (OrderItem item : order.getItems()) {&#10;                Inventory inventory = inventoryService.getInventoryByProductId(item.getProduct().getId());&#10;                inventoryService.updateStock(inventory.getId(), item.getQuantity());&#10;            }&#10;        }&#10;        &#10;        orderRepository.deleteById(id);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/service/ProductService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/service/ProductService.java" />
              <option name="updatedContent" value="package org.example.service;&#10;&#10;import jakarta.persistence.EntityNotFoundException;&#10;import lombok.RequiredArgsConstructor;&#10;import org.example.model.Product;&#10;import org.example.repository.ProductRepository;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.util.List;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;public class ProductService {&#10;    private final ProductRepository productRepository;&#10;&#10;    public List&lt;Product&gt; getAllProducts() {&#10;        return productRepository.findAll();&#10;    }&#10;&#10;    public Product getProductById(Long id) {&#10;        return productRepository.findById(id)&#10;                .orElseThrow(() -&gt; new EntityNotFoundException(&quot;Product not found with id: &quot; + id));&#10;    }&#10;&#10;    @Transactional&#10;    public Product createProduct(Product product) {&#10;        return productRepository.save(product);&#10;    }&#10;&#10;    @Transactional&#10;    public Product updateProduct(Long id, Product productDetails) {&#10;        Product product = getProductById(id);&#10;        &#10;        product.setName(productDetails.getName());&#10;        product.setDescription(productDetails.getDescription());&#10;        product.setPrice(productDetails.getPrice());&#10;        product.setBarcode(productDetails.getBarcode());&#10;        product.setCategory(productDetails.getCategory());&#10;        product.setSupplier(productDetails.getSupplier());&#10;&#10;        return productRepository.save(product);&#10;    }&#10;&#10;    @Transactional&#10;    public void deleteProduct(Long id) {&#10;        if (!productRepository.existsById(id)) {&#10;            throw new EntityNotFoundException(&quot;Product not found with id: &quot; + id);&#10;        }&#10;        productRepository.deleteById(id);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>